class Board
/*
class responsible for the variables and operations of all the subclasses(types of pieces in the game)
*/
values --Board is a 7x9 rectangle = 63 tiles
		public XSize: nat1 = 7;
		public YSize: nat1 = 9;
instance variables
		private board: seq of seq of Tile := [[]];
		private static boardInstance:Board := new Board(); --Board singleton
operations

--builds small board
		private buildBoard: seq of nat1 ==> Tile
		buildBoard(a_coords) == (
			let piece =
			  cases a_coords:
			     [2,2]-> new Cat(<Blue>, 2),
			     [6,8]-> new Cat(<Red>, 2),
			     [6,2]-> new Dog(<Blue>, 3),
			     [2,8] -> new Dog(<Red>, 3),
			     [1,3] -> new Elephant(<Blue>, 8),
			     [7,7] -> new Elephant(<Red>, 8),
			     [5,3] -> new Leopard(<Blue>, 5),
			     [3,7] -> new Leopard(<Red>, 5),
			     [7,1] -> new Lion(<Blue>, 7),
			     [1,9] -> new Lion(<Red>, 7),
			     [7,3] -> new Rat(<Blue>, 1),
			     [1,7] -> new Rat(<Red>, 1),
			     [1,1] -> new Tiger(<Blue>, 6),
			     [7,9] -> new Tiger(<Red>, 6),
			     [5,7] -> new Wolf(<Blue>, 4),
			     [3,3] -> new Wolf(<Red>, 4),
			     others -> nil
			  end
			in  
				if(piece <> nil)
					then return new Tile(a_coords, piece)
				else
					return new Tile(a_coords);
		);
		
		--returns singleton
		public static getInstance: () ==> Board
		getInstance() == return boardInstance;
		
		--get method for a board tile
		pure public getTile: seq of nat1 ==> Tile
		getTile(a_coords) == (
				return board(a_coords(1))(a_coords(2));
		);

end Board